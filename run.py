import json
import math
import sys
import string

from itertools import product

from pprint import pprint


def word_entropy(word, alphabet):
    """
    word = tuple(), cause it should be produced via itertools.
    alphabet = string(), ideally from the alphabet_menu dict.

    H = L(log N / log 2), where L is the number of symbols in the 
    word and N is the number of symbols in the alphabet.

    Returns the entropy value in bits, or zero case the word has 
    lenght 0.
    """

    if (len(word) == 0) or (len(alphabet) == 0):
        return 0
    else:
        alphabet_length = len(alphabet)
        word_symbols = set()
        for i in word:
            for j in i:
                word_symbols.add(j)

        result = len(word_symbols) * (math.log(alphabet_length) / math.log(2))

    return result


def entropy_per_symbol(alphabet):
    """
    alphabet = string()

    The entropy per symbol of a given alphabet.

    Basically it comes from H = L(log N / log 2) by taking L = N and,
    in the end, taking H / N.

    Check here:
    https://en.wikipedia.org/wiki/Password_strength#Random_passwords
    """

    symbols_count = len(alphabet)
    result = math.log(symbols_count) / math.log(2)

    return result


def entropy_distribution(alphabet, word_size):
    """
    Calculates the entropy distribution of  the words of size word_size 
    generated by the symbols on the given alphabet.
    alphabet = string()
    word_size = int()
    """
    result = dict()
    for word in product(list(alphabet), repeat=word_size):
        entropy = word_entropy(word, alphabet)
        if entropy not in result.keys():
            result[entropy] = 1 
        else:
            result[entropy] += 1

    return result


def plot_entropy_distribution(distribution):
    """
    distribution from entropy_distribution()
    """
    pass


def save_to_file(data, filename):
    with open(filename, "w") as f:
        f.write(data)




alphabet_menu = {
    # https://docs.python.org/3/library/string.html#string-constants
    1: string.ascii_letters, # ascii_lowercase + ascii_uppercase
    2: string.ascii_lowercase, # 'abcdefghijklmnopqrstuvwxyz'
    3: string.ascii_uppercase, # 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    4: string.digits, # '0123456789'
    5: string.hexdigits, # '0123456789abcdefABCDEF'
    6: string.octdigits, # '01234567'
    7: string.punctuation, # !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
    8: string.printable, # digits, ascii_letters, punctuation and whitespace
    9: string.whitespace, # space, tab, linefeed, return, formfeed, vertical tab
    }

#alphabet = "0123456789abcdef" # traditional hexadecimal
alphabet = alphabet_menu[4]
distribution = entropy_distribution(alphabet, 11)

filename = "./data/digits_11.json"
save_to_file(json.dumps(distribution), filename)

pprint(distribution)



